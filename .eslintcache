[{"/Users/markoarsovic/b2s/src/index.js":"1","/Users/markoarsovic/b2s/src/App.js":"2","/Users/markoarsovic/b2s/src/containers/Connection/Connection.js":"3","/Users/markoarsovic/b2s/src/hoc/Layout/Layout.js":"4","/Users/markoarsovic/b2s/src/containers/Account/Admin/Account.js":"5","/Users/markoarsovic/b2s/src/containers/Account/Batisphere/Account.js":"6","/Users/markoarsovic/b2s/src/hoc/Aux/Aux.js":"7","/Users/markoarsovic/b2s/src/hoc/AccountLayout/Layout.js":"8","/Users/markoarsovic/b2s/src/components/MyAccount/MyAccount.js":"9","/Users/markoarsovic/b2s/src/components/UI/Spinner/Spinner.js":"10","/Users/markoarsovic/b2s/src/components/MyAccount/Logout/Logout.js":"11","/Users/markoarsovic/b2s/src/components/Navigation/Toolbar/Toolbar.js":"12","/Users/markoarsovic/b2s/src/containers/Account/Admin/Actions/EditUsers/EditUsers.js":"13","/Users/markoarsovic/b2s/src/containers/Account/Admin/Actions/ListCustomers/ListCustomers.js":"14","/Users/markoarsovic/b2s/src/containers/Account/Admin/Actions/ListUsers/ListUsers.js":"15","/Users/markoarsovic/b2s/src/components/UI/Input/Input.js":"16","/Users/markoarsovic/b2s/src/components/Navigation/AccountToolbar/Toolbar.js":"17","/Users/markoarsovic/b2s/src/components/UI/Button/Button.js":"18","/Users/markoarsovic/b2s/src/containers/Account/Admin/Actions/EditUsers/AddUser/AddUser.js":"19","/Users/markoarsovic/b2s/src/components/Navigation/NavigationItems/NavigationItems.js":"20","/Users/markoarsovic/b2s/src/components/UI/Modal/Modal.js":"21","/Users/markoarsovic/b2s/src/containers/Account/Admin/Actions/EditUsers/EditUser/EditUser.js":"22","/Users/markoarsovic/b2s/src/components/Navigation/NavigationItems/SecondNavigationItems.js":"23","/Users/markoarsovic/b2s/src/components/Navigation/NavigationItems/NavigationItem/NavigationItem.js":"24","/Users/markoarsovic/b2s/src/components/CSV/processingCSV.js":"25","/Users/markoarsovic/b2s/src/components/UI/Backdrop/Backdrop.js":"26","/Users/markoarsovic/b2s/src/containers/Account/Admin/Advices/Advices.js":"27","/Users/markoarsovic/b2s/src/containers/Account/Admin/Advices/Advice/Advice.js":"28","/Users/markoarsovic/b2s/src/containers/Account/Admin/Graphiques/LinearChart/LinearChart.js":"29","/Users/markoarsovic/b2s/src/containers/Account/Admin/Graphiques/ChartSettings/LinearChartSettings.js":"30","/Users/markoarsovic/b2s/src/containers/Account/Admin/Graphiques/LayoutComponent/SettingsTable.js":"31","/Users/markoarsovic/b2s/src/containers/Account/Admin/Graphiques/LayoutComponent/DropDownColors.js":"32","/Users/markoarsovic/b2s/src/containers/Account/Admin/Actions/ListCustomers/Customer/Customer.js":"33","/Users/markoarsovic/b2s/src/components/Users/ListUsers/ListUsers.js":"34","/Users/markoarsovic/b2s/src/components/Auth/Auth.js":"35","/Users/markoarsovic/b2s/src/components/Users/ListCustomers/ListCustomers.js":"36","/Users/markoarsovic/b2s/src/components/FormCircuits/FormCircuits.js":"37","/Users/markoarsovic/b2s/src/components/FormCircuits/Circuits/Circuits.js":"38","/Users/markoarsovic/b2s/src/components/FormCircuits/Rooms/Rooms.js":"39"},{"size":262,"mtime":1612087686829,"results":"40","hashOfConfig":"41"},{"size":1006,"mtime":1612087686826,"results":"42","hashOfConfig":"41"},{"size":3713,"mtime":1612088165336,"results":"43","hashOfConfig":"41"},{"size":448,"mtime":1610551352213,"results":"44","hashOfConfig":"41"},{"size":1334,"mtime":1612087363994,"results":"45","hashOfConfig":"41"},{"size":1355,"mtime":1611311358689,"results":"46","hashOfConfig":"41"},{"size":61,"mtime":1610018977408,"results":"47","hashOfConfig":"41"},{"size":448,"mtime":1611311417354,"results":"48","hashOfConfig":"41"},{"size":424,"mtime":1611582996922,"results":"49","hashOfConfig":"41"},{"size":269,"mtime":1612087686828,"results":"50","hashOfConfig":"41"},{"size":684,"mtime":1610900494665,"results":"51","hashOfConfig":"41"},{"size":688,"mtime":1611313110357,"results":"52","hashOfConfig":"41"},{"size":2026,"mtime":1612087720885,"results":"53","hashOfConfig":"41"},{"size":1203,"mtime":1612087686828,"results":"54","hashOfConfig":"41"},{"size":361,"mtime":1612087686829,"results":"55","hashOfConfig":"41"},{"size":1708,"mtime":1610361813977,"results":"56","hashOfConfig":"41"},{"size":332,"mtime":1611314729935,"results":"57","hashOfConfig":"41"},{"size":316,"mtime":1610362353115,"results":"58","hashOfConfig":"41"},{"size":9784,"mtime":1612087686829,"results":"59","hashOfConfig":"41"},{"size":488,"mtime":1610551868372,"results":"60","hashOfConfig":"41"},{"size":738,"mtime":1610966936253,"results":"61","hashOfConfig":"41"},{"size":6866,"mtime":1612023473179,"results":"62","hashOfConfig":"41"},{"size":1376,"mtime":1611319013820,"results":"63","hashOfConfig":"41"},{"size":408,"mtime":1610319521080,"results":"64","hashOfConfig":"41"},{"size":3385,"mtime":1612087686824,"results":"65","hashOfConfig":"41"},{"size":220,"mtime":1610014250636,"results":"66","hashOfConfig":"41"},{"size":1116,"mtime":1612087363998,"results":"67","hashOfConfig":"41"},{"size":302,"mtime":1612087828729,"results":"68","hashOfConfig":"41"},{"size":14184,"mtime":1612087364001,"results":"69","hashOfConfig":"41"},{"size":1684,"mtime":1612087363997,"results":"70","hashOfConfig":"41"},{"size":2849,"mtime":1612087364000,"results":"71","hashOfConfig":"41"},{"size":2592,"mtime":1612087364000,"results":"72","hashOfConfig":"41"},{"size":5318,"mtime":1612089184668,"results":"73","hashOfConfig":"41"},{"size":3144,"mtime":1612087686828,"results":"74","hashOfConfig":"41"},{"size":5810,"mtime":1612087686824,"results":"75","hashOfConfig":"41"},{"size":2481,"mtime":1612087686828,"results":"76","hashOfConfig":"41"},{"size":4283,"mtime":1612087686825,"results":"77","hashOfConfig":"41"},{"size":1635,"mtime":1612087686825,"results":"78","hashOfConfig":"41"},{"size":2522,"mtime":1612089606024,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"5fzxdm",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"82"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"82"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"82"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"82"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"82"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"82"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/markoarsovic/b2s/src/index.js",[],["165","166"],"/Users/markoarsovic/b2s/src/App.js",[],"/Users/markoarsovic/b2s/src/containers/Connection/Connection.js",[],"/Users/markoarsovic/b2s/src/hoc/Layout/Layout.js",[],"/Users/markoarsovic/b2s/src/containers/Account/Admin/Account.js",[],"/Users/markoarsovic/b2s/src/containers/Account/Batisphere/Account.js",[],"/Users/markoarsovic/b2s/src/hoc/Aux/Aux.js",[],"/Users/markoarsovic/b2s/src/hoc/AccountLayout/Layout.js",[],"/Users/markoarsovic/b2s/src/components/MyAccount/MyAccount.js",[],"/Users/markoarsovic/b2s/src/components/UI/Spinner/Spinner.js",[],"/Users/markoarsovic/b2s/src/components/MyAccount/Logout/Logout.js",[],"/Users/markoarsovic/b2s/src/components/Navigation/Toolbar/Toolbar.js",[],"/Users/markoarsovic/b2s/src/containers/Account/Admin/Actions/EditUsers/EditUsers.js",[],"/Users/markoarsovic/b2s/src/containers/Account/Admin/Actions/ListCustomers/ListCustomers.js",[],"/Users/markoarsovic/b2s/src/containers/Account/Admin/Actions/ListUsers/ListUsers.js",[],"/Users/markoarsovic/b2s/src/components/UI/Input/Input.js",[],"/Users/markoarsovic/b2s/src/components/Navigation/AccountToolbar/Toolbar.js",[],"/Users/markoarsovic/b2s/src/components/UI/Button/Button.js",[],"/Users/markoarsovic/b2s/src/containers/Account/Admin/Actions/EditUsers/AddUser/AddUser.js",["167"],"import React, { Component } from \"react\";\nimport axios from 'axios';\nimport crypto from \"crypto\";\n\nimport Input from \"../../../../../../components/UI/Input/Input\"\nimport Button from \"../../../../../../components/UI/Button/Button\"\n\nclass AddUser extends Component {\n\n    state = {\n        orderForm: {\n            username: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"userName\",\n                    placeholder: \"Nom d'utilisateur\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            street: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"street\",\n                    placeholder: \"Rue\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            city: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"city\",\n                    placeholder: \"Ville\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            right: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        { value: 'client', displayValue: 'Client' },\n                        { value: 'batisphere', displayValue: 'Batisphere' },\n                        { value: 'admin', displayValue: 'Administrateur' }\n                    ]\n                },\n                value: 'client',\n                validation: {},\n                valid: true\n            }\n        },\n        loading: true,\n        modify: false,\n        errorMessage: \"\",\n        successMessage: \"\",\n        formIsValid: false,\n        canBedAdded: false\n    }\n\n    requestAdd = (event) => {\n        event.preventDefault();\n\n        const options = {\n            headers: {\n                \"X-Parse-Application-Id\": process.env.REACT_APP_APP_ID,\n                \"X-Parse-REST-API-Key\": process.env.REACT_APP_API_KEY,\n                \"X-Parse-Session-Token\": sessionStorage.getItem(\"token\")\n            }\n        };\n\n        //Returns the names of supported hash algorithms\n        const hash = crypto.getHashes();\n\n        const url = \"https://parseapi.back4app.com/users\";\n        const user = {\n            username: this.state.orderForm.username.value,\n            email: this.state.orderForm.username.value.concat(\"@\", this.state.orderForm.right.value, \".fr\"),\n            street: this.state.orderForm.street.value,\n            city: this.state.orderForm.city.value,\n            password: crypto.createHash('sha1').update(this.state.orderForm.username.value).digest('hex'),\n            right: this.state.orderForm.right.value\n        }\n\n        if (this.checkUnicity(user.username) === true && this.state.formIsValid === true) {\n            console.log(\"yolo\")\n\n            // Requete de création de compte\n            axios\n                .post(url, user, options)\n                .then((res) => {\n                    this.setState({\n                        loading: false,\n                        errorMessage: \"\",\n                        successMessage: \"Utilisateur crée avec succès\"\n                    });\n                })\n                .catch((err) => {\n                    this.setState({\n                        loading: false,\n                        errorMessage: \"Echec. \".concat(err.response.data.error),\n                        successMessage: \"\"\n                    });\n                });\n\n            // Requete de changement de mot de passe\n            if (this.state.errorMessage.trim() === \"\") {\n                let urlToResetPassword = \"https://parseapi.back4app.com/requestPasswordReset\"\n                const userEmail = {\n                    \"email\" : user.email\n                }\n                axios\n                    .post(urlToResetPassword, userEmail , options)\n                    .then((res) => {\n                        console.log(res)\n                        this.setState({\n                            loading: false,\n                            errorMessage: \"\",\n                            successMessage: \"Utilisateur crée avec succès\"\n                        });\n                    })\n                    .catch((err) => {\n                        console.log(err);\n                        this.setState({\n                            loading: false,\n                            errorMessage: \"Echec.\".concat(err.response.data.error),\n                            successMessage: \"\"\n                        });\n                    });\n            }\n        }\n    }\n\n    checkUnicity(username) {\n        let valid = true;\n        let listUser = null;\n\n        const url = \"https://parseapi.back4app.com/users\";\n        const options = {\n            headers: {\n                \"X-Parse-Application-Id\": process.env.REACT_APP_APP_ID,\n                \"X-Parse-REST-API-Key\": process.env.REACT_APP_API_KEY,\n                \"X-Parse-Revocable-Session\": 1,\n                \"Content-Type\": \"application/json\",\n            }\n        };\n\n        axios\n            .get(url, options)\n            .then((res) => {\n                listUser = res.data.results;\n                for (let elem in listUser) {\n                    valid = username !== listUser[elem].username && valid\n                }\n                this.setState({ loading: false });\n            })\n            .catch((err) => {\n                console.log(err);\n                this.setState({ loading: false });\n            });\n\n            if(valid) {\n                console.log(\"unique\")\n            }\n\n        return valid;\n    }\n\n    checkValidity(value, rules) {\n        let isValid = true;\n\n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid;\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        };\n\n        const updatedFormElement = {\n            ...updatedOrderForm[inputIdentifier]\n        };\n\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.touched = true;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation)\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n\n        let formIsValid = true;\n\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n\n        this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\n    }\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            })\n        }\n\n        let form = (\n            <div>\n                <h2> Ajout d'un utilisateur</h2>\n                {formElementsArray.map(formElement => (\n                    <Input\n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))}\n\n                <div>\n                    <div> {this.state.errorMessage}</div>\n                    <div style={{ color: \"green\" }}> {this.state.successMessage}</div>\n                </div>\n\n                <Button\n                    btnType=\"Success\"\n                    value=\"Submit\"\n                    disabled={!this.state.formIsValid}\n                    clicked={this.requestAdd}> Création </Button>\n            </div>\n        );\n\n\n        return (\n            <div >\n                {form}\n            </div>\n        )\n    }\n}\n\nexport default AddUser;","/Users/markoarsovic/b2s/src/components/Navigation/NavigationItems/NavigationItems.js",[],"/Users/markoarsovic/b2s/src/components/UI/Modal/Modal.js",[],"/Users/markoarsovic/b2s/src/containers/Account/Admin/Actions/EditUsers/EditUser/EditUser.js",[],"/Users/markoarsovic/b2s/src/components/Navigation/NavigationItems/SecondNavigationItems.js",[],"/Users/markoarsovic/b2s/src/components/Navigation/NavigationItems/NavigationItem/NavigationItem.js",[],"/Users/markoarsovic/b2s/src/components/CSV/processingCSV.js",[],"/Users/markoarsovic/b2s/src/components/UI/Backdrop/Backdrop.js",[],"/Users/markoarsovic/b2s/src/containers/Account/Admin/Advices/Advices.js",["168","169"],"import React, { Component } from \"react\";\n\nimport style from \"./Advices.module.css\"\nimport Aux from \"../../../../hoc/Aux/Aux\"\nimport Advice from \"./Advice/Advice\";\nimport LinearChart from '../../Admin/Graphiques/LinearChart/LinearChart';\nimport CSV from '../../../../components/CSV/processingCSV'\n\nclass Advices extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataObtained: false,\n            columnsName: null,\n            data: null,\n        }\n    }\n\n    loadData = (data1, data2) => {\n        this.setState({\n            dataObtained: true,\n            columnsName: data1,\n            data: data2,\n        });\n    }\n\n\n    render() {\n\n        if (this.state.dataObtained === true) {\n\n            return (\n                <Aux >\n                    <LinearChart data={this.state.data} columns={this.state.columnsName} />\n                </Aux>\n            )\n        }\n\n        else {\n            return (\n                <Aux >\n                    <CSV sendJSON={this.loadData} />\n                </Aux>\n            )\n        }\n    }\n}\n\nexport default Advices;","/Users/markoarsovic/b2s/src/containers/Account/Admin/Advices/Advice/Advice.js",[],"/Users/markoarsovic/b2s/src/containers/Account/Admin/Graphiques/LinearChart/LinearChart.js",["170","171","172","173","174","175","176","177","178","179","180","181","182"],"import React, { Component, useState, PureComponent } from \"react\";\nimport {\n    Label, LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ReferenceArea, Legend, ResponsiveContainer\n} from 'recharts';\n\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Settings from '../ChartSettings/LinearChartSettings';\nimport CSV from '../../../../../components/CSV/processingCSV';\nimport Colors from '../../../../../components/UI/colors'\n\n//import Data from '../data'\n\n//const data = Data.importCsv(\"/Users/louiscauquelin/Downloads/data.csv\");\n\n//const data = null;\n/*\nconst data = [\n    { name: 1, cost: 4.11, impression: 100 },\n    { name: 2, cost: 2.39, impression: 120 },\n    { name: 3, cost: 1.37, impression: 150 },\n    { name: 4, cost: 1.16, impression: 180 },\n    { name: 5, cost: 2.29, impression: 200 },\n    { name: 6, cost: 3, impression: 499 },\n    { name: 7, cost: 0.53, impression: 50 },\n    { name: 8, cost: 2.52, impression: 100 },\n    { name: 9, cost: 1.79, impression: 200 },\n    { name: 10, cost: 2.94, impression: 222},\n    { name: 11, cost: 4.3, impression: 210 },\n    { name: 12, cost: 4.41, impression: 300 },\n    { name: 13, cost: 2.1, impression: 50 },\n    { name: 14, cost: 8, impression: 190 },\n    { name: 15, cost: 0, impression: 300 },\n    { name: 16, cost: 9, impression: 400 },\n    { name: 17, cost: 3, impression: 200 },\n    { name: 18, cost: 2, impression: 50 },\n    { name: 19, cost: 3, impression: 100 },\n    { name: 20, cost: 7, impression: 100 }\n];*/\n\n\n\n//fonction pour zoom\n\nclass LinearChart extends Component {\n    static jsfiddleUrl = 'https://jsfiddle.net/alidingling/nhpemhgs/';\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: this.props.data,\n            columns: this.props.columns,\n            displayedColumns: [],\n            keys: [],\n            maxLine: 150,\n            colors: Colors,\n\n\n            //VARIBALES ZOOM\n            /*left: 'dataMin',\n            right: 'dataMax',\n            refAreaLeft: '',\n            refAreaRight: '',\n            top: 'dataMax+1',\n            bottom: 'dataMin-1',\n            top2: 'dataMax+20',\n            bottom2: 'dataMin-20',\n            animation: true,\n            dropDownLeft : \"15 min\",\n            dropDownRight : \"1 mois\",*/\n\n\n            //Variables pour otpions des graphiques\n\n            //Distance pointillés grille\n            dashArrayXSpace: 3,\n            dashArrayYSpace: 3,\n            dashArray: \"3 3\",\n\n            //Longueur et largeur du graph\n            graphWidth: 900,\n            graphHeight: 400,\n\n            //Nom axe abscisse (mettre le nom du keyword dans le tableau de données)\n            XAxisName: \"name\",\n\n            //Nom axe ordonnée (mettre le nom du keyword dans le tableau de données)\n            YAxisName: \"\",\n            lines: null,\n        }\n\n        //Lines initialisation\n        this.state.lines = Object.keys(this.state.columns)\n            .map(key => {\n                switch (parseInt(key)) {\n                    case 0:\n                        this.state.XAxisName = this.state.columns[key].name.toString()\n\n                        break;\n\n                    case 1:\n                        break;\n\n                    default:\n                        if (this.state.columns[key].name !== null) {\n\n                            let color;\n                            let colorsCopy = this.state.colors;\n                            let iterator = 0;\n                            let found = false;\n\n                            while (iterator < colorsCopy.length && found === false) {\n\n                                if (colorsCopy[iterator].used === false) {\n\n                                    colorsCopy[iterator].used = true;\n                                    colorsCopy[iterator].line = this.state.columns[key].name;\n                                    found = true;\n                                    color = colorsCopy[iterator].code;\n                                }\n\n                                iterator++;\n                            }\n\n                            this.state.displayedColumns.push({ \"name\": this.state.columns[key].name.toString(), \"displayed\": true })\n                            return (\n                                <Line key={this.state.columns[key].name.toString()} type=\"natural\" dataKey={this.state.columns[key].name.toString()} stroke={color} dot={false} />\n                            )\n                            this.state.colors = colorsCopy;\n                        }\n                        break;\n\n\n                }\n\n            })\n        this.state.lines.splice(0, 1);\n\n        this.updateDisplayedLines = this.updateDisplayedLines.bind(this);\n        this.changeColor = this.changeColor.bind(this);\n\n    }\n\n\n    /*\n    zoom() {\n        let { refAreaLeft, refAreaRight, data } = this.state;\n    \n        if (refAreaLeft === refAreaRight || refAreaRight === '') {\n        this.setState(() => ({\n            refAreaLeft: '',\n            refAreaRight: '',\n        }));\n        return;\n        }\n    \n        // xAxis domain\n        if (refAreaLeft > refAreaRight) [refAreaLeft, refAreaRight] = [refAreaRight, refAreaLeft];\n    \n        // yAxis domain\n        const [bottom, top] = this.getAxisYDomain(refAreaLeft, refAreaRight, 'C', 1);\n        const [bottom2, top2] = this.getAxisYDomain(refAreaLeft, refAreaRight, 'D', 50);\n    \n        this.setState(() => ({\n        refAreaLeft: '',\n        refAreaRight: '',\n        data: data.slice(),\n        left: refAreaLeft,\n        right: refAreaRight,\n        bottom,\n        top,\n        bottom2,\n        top2,\n        }));\n    }\n    \n    zoomOut() {\n        const { data } = this.state;\n        this.setState(() => ({\n          data: data.slice(),\n          refAreaLeft: '',\n          refAreaRight: '',\n          left: 'dataMin',\n          right: 'dataMax',\n          top: 'dataMax+1',\n          bottom: 'dataMin',\n          top2: 'dataMax+50',\n          bottom2: 'dataMin+50',\n        }));\n    \n    \n        //A AJOUTER DANS LE RENDER\n    \n                        onMouseDown={e => this.setState({ refAreaLeft: e.activeTooltipIndex })}\n                    onMouseMove={e => this.state.refAreaLeft && this.setState({ refAreaRight: e.activeTooltipIndex })}\n                    onMouseUp={this.zoom.bind(this)}\n    \n    \n         \n                        {\n                            (this.state.refAreaLeft && this.state.refAreaRight) ? (\n                            <ReferenceArea x1={this.state.refAreaLeft} x2={this.state.refAreaRight} strokeOpacity={0.3} />) : null\n                        }\n    }*/\n\n    deleteColor(name) {\n        let colorsCopy = this.state.colors; \n        let colorDeleted;\n        let tabLines = this.state.lines;\n        let secondLine = \"\";\n\n        for (let iterator in colorsCopy) {\n            if (name === colorsCopy[iterator].line) {\n                colorsCopy[iterator].used = false;\n                colorsCopy[iterator].line = \"\";\n                colorDeleted = colorsCopy[iterator].code;\n            }\n        }\n\n        for (let i in tabLines) {\n            if (typeof (tabLines[i]) !== 'undefined') {\n\n                if (tabLines[i].props.stroke === colorDeleted) {\n                    secondLine = tabLines[i].key;\n                }\n            }\n        }\n\n        if (secondLine !== \"\") {\n            for (let iterator in colorsCopy) {\n                if (colorDeleted === colorsCopy[iterator].code) {\n                    colorsCopy[iterator].used = true;\n                    colorsCopy[iterator].line = secondLine;\n                }\n            }\n        }\n\n        this.setState({\n            colors: colorsCopy,\n            data: this.state.data.slice(),\n        });\n\n    }\n\n    generateColor(name) {\n\n        let color;\n        let colorsCopy = this.state.colors;\n        let iterator = 0;\n        let found = false;\n\n        while (iterator < colorsCopy.length && found === false) {\n\n            if (colorsCopy[iterator].used === false) {\n\n                colorsCopy[iterator].used = true;\n                colorsCopy[iterator].line = name;\n                found = true;\n                color = colorsCopy[iterator].code;\n            }\n\n            iterator++;\n        }\n        this.setState({\n            colors: colorsCopy\n        });\n        return color;\n    }\n\n    changeColor(lineName, color) {\n        let tabLines = this.state.lines;\n        let colorsCopy = this.state.colors;\n        let colorCode = \"#fa4d56\"; //couleur par défaut est rouge\n\n        for (let iterator in colorsCopy) {\n            //On récupère le code couleur de la couleur a attribuer\n            if (color === colorsCopy[iterator].name) {\n                colorCode = colorsCopy[iterator].code;\n            }\n\n\n        }\n\n        //On cherche la ligne, on la supprime et recréée avec la bonne couleur (pas possible de modifier juste la variable stroke)\n        //Suppression de la ligne entrain suppression de la couleur de cette ligne et réattribution de la couleur initiale de la ligne a une autre si elle est utilisée plusieurs fois \n        //On récrée une ligne avec la bonne couleur\n        for (let i in tabLines) {\n            if (typeof (tabLines[i]) !== 'undefined') {\n                if (tabLines[i].key === lineName) {\n                    //tabLines[i].props.stroke = color;\n                    tabLines.splice(i, 1);\n                    //Delete color va se charger de supprimer la ligne dans les couleurs et de changer de propriétaire la couleur si elle est utilisée par d'autres lignes\n                    this.deleteColor(lineName);\n                    tabLines.push(<Line key={lineName} type=\"natural\" dataKey={lineName} stroke={colorCode} dot={false} />)\n                }\n\n            }\n        }\n\n        //On change les valeurs dans colors (pour référence des utilisations des couleurs)\n        for (let iterator in colorsCopy) {\n            //Si la nouvelle couleur n'était pas utilisée, on la marque comme tel avec le nom de la ligne associé\n            if (colorsCopy[iterator].name === color && colorsCopy[iterator].used === false) {\n                colorsCopy[iterator].used = true;\n                colorsCopy[iterator].line = lineName;\n            }\n        }\n\n        this.setState({\n            colors: colorsCopy,\n            lines: tabLines,\n            data: this.state.data.slice(),\n        });\n\n    }\n\n    updateDisplayedLines(name, displayed) {\n\n        //Variable pour savoir si une ligne marquée comme affichée est absente des lignes affichée (auquel cas on la créée)\n        let toDisplay = true;\n        let tab = this.state.displayedColumns;\n        let tabLines = this.state.lines;\n        //On rempli d'abord le tableau des lignes affichées\n        for (let i = 0; i < tab.length; i++) {\n            if (tab[i].name === name) {\n                tab[i].displayed = displayed\n            }\n\n        }\n\n        //Puis on update les lignes affichées avec le tableau\n        for (let i = 0; i < tab.length; i++) {\n\n            //SUPPRESSION\n            //Si la ligne n'est pas affichée, on supprime la ligne qui a le même nom si elle est présente dans le tableau\n            if (tab[i].displayed === false) {\n                let lenghtLines = tabLines.length;\n                for (let j = 0; j < lenghtLines; j++) {\n\n                    if (typeof (tabLines[j]) !== 'undefined' && typeof (tab[i]) !== 'undefined') {\n                        if (tab[i].name === tabLines[j].props.dataKey) {\n                            tabLines.splice(j, 1);\n                            this.deleteColor(tab[i].name);\n\n                        }\n                    }\n\n                }\n            }\n\n            //AJOUT\n            //Si la ligne marquée pour l'affichage , on vérifie si si elle l'est déjà, sinon on l'ajoute aux lignes\n            if (tab[i].displayed === true) {\n                for (let j = 0; j < tabLines.length; j++) {\n                    if (typeof (tabLines[j]) !== 'undefined' && typeof (tab[i]) !== 'undefined') {\n\n                        if (tab[i].name === tabLines[j].props.dataKey) {\n                            toDisplay = false;\n                        }\n                    }\n                }\n\n                if (toDisplay === true) {\n\n                    tabLines.push(<Line key={tab[i].name.toString()} type=\"natural\" dataKey={tab[i].name.toString()} stroke={this.generateColor(tab[i].name.toString())} dot={false} />)\n\n                }\n\n                if (toDisplay === false) {\n                    toDisplay = true;\n                }\n\n\n            }\n        }\n        const { data } = this.state;\n        this.setState({\n            displayedColumns: tab,\n            lines: tabLines,\n            data: data.slice(),\n        });\n\n\n\n\n    }\n\n    render() {\n\n        return (\n\n            <>\n                <div>\n                    <Settings lines={this.state.lines} data={this.state.columns} updateLinesFuntion={this.updateDisplayedLines} displayedLines={this.state.displayedColumns} changeColor={this.changeColor} />\n                </div>\n\n                <div style={{ width: '90%', height: 600, marginTop: 15 }}>\n\n                    <ResponsiveContainer>\n                        <LineChart\n\n                            width={this.state.graphWidth}\n                            height={this.state.graphHeight}\n                            data={this.state.data}>\n                            <CartesianGrid strokeDasharray={this.state.dashArray} />\n                            <XAxis dataKey={this.state.XAxisName} />\n                            <YAxis dataKey={this.state.YAxisName} />\n                            {this.state.lines}\n                            <Tooltip />\n                            <Legend height={60} />\n                        </LineChart>\n                    </ResponsiveContainer>\n                </div>\n            </>\n        );\n\n    }\n\n}\n\nexport default LinearChart;","/Users/markoarsovic/b2s/src/containers/Account/Admin/Graphiques/ChartSettings/LinearChartSettings.js",["183"],"import React, { Component } from \"react\";\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal'\nimport SettingsTable from '../LayoutComponent/SettingsTable'\n\n\n\nclass Settings extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalShow: false,\n    };\n\n    this.showModal = this.showModal.bind(this);\n    this.hideModal = this.hideModal.bind(this);\n  }\n\n  showModal() {\n    this.setState({\n      modalShow: true\n    });\n  }\n  hideModal() {\n    this.setState({\n      modalShow: false\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <Button variant=\"primary\" onClick={() => this.showModal()}> Réglages </Button>\n\n        <Modal size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" show={this.state.modalShow} onHide={this.hideModal} centered>\n          <Modal.Header closeButton>\n            <Modal.Title id=\"contained-modal-title-vcenter\">\n              Réglages\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Container>\n              <Row>\n                <SettingsTable lines={this.props.lines} data={this.props.data} updateLinesFuntion={this.props.updateLinesFuntion} displayedLines={\n                  this.props.displayedLines} changeColor={this.props.changeColor} />\n              </Row>\n            </Container>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={() => this.hideModal()}>Close</Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n\n    );\n\n  }\n\n\n}\n\nexport default Settings;\n","/Users/markoarsovic/b2s/src/containers/Account/Admin/Graphiques/LayoutComponent/SettingsTable.js",["184","185","186","187","188","189","190","191"],"import DropdownButton from 'react-bootstrap/DropdownButton'\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Button from 'react-bootstrap/Button';\nimport React, { Component, useState } from \"react\";\nimport Form from 'react-bootstrap/Form'\nimport Container from 'react-bootstrap/Container';\nimport Table from 'react-bootstrap/Table'\nimport DropDownColors from './DropDownColors'\n\n\n\n\nexport default class SettingsTable extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: \"Changer donnée\",\n      data: this.props.data,\n      item: null\n    };\n\n  }\n\n  handleChangeCheckbox = (event) => {\n    this.props.updateLinesFuntion(event.target.id.toString(), event.target.checked)\n  }\n\n  //Retourne la couleur en hex de la ligne passée en paramètres\n  getHighlightedColor(name) {\n    let color = \"\";\n    for (let i in this.props.lines) {\n\n      if (typeof (this.props.lines[i]) !== 'undefined') {\n        if (this.props.lines[i].key === name) {\n          color = this.props.lines[i].props.stroke;\n        }\n      }\n    }\n    return color;\n  }\n\n  render() {\n    let items = null;\n    let highlightColor = \"\";\n\n    //Création des lignes affichées\n    //Pour chaque colonne\n    items = Object.keys(this.state.data)\n      .map(key => {\n        //On parcours le tableau de référence d'affichage des lignes pour savoir lesquelles sont déjà affichées et donc lesquelles doivent être cochées \n        for (let i in this.props.displayedLines) {\n          //Si la valeur du tableau de colonnes n'est pas null\n          if (this.state.data[key].name !== null) {\n            //si on trouve la même ligne dans les deux tableaux, on peut créé l'objet en entrant dans la valeur checked de la checkbox le bolléen d'affichage\n            if (this.state.data[key].name === this.props.displayedLines[i].name) {\n              return (\n                <tr key={this.props.displayedLines[i].name}>\n                  <td> <Form.Check key={this.props.displayedLines[i].name} id={this.state.data[key].name} onChange={this.handleChangeCheckbox} checked={this.props.displayedLines[i].displayed} /> </td>\n                  <td>{this.state.data[key].name}</td>\n                  <td><DropDownColors key={this.props.displayedLines[i].name} highlightColor={this.getHighlightedColor(this.state.data[key].name)} changeColor={this.props.changeColor} activeLine={this.state.data[key].name} /></td>\n                </tr>\n              )\n            }\n          }\n        }\n      })\n\n    return (\n      <Table striped bordered hover size=\"sm\">\n        <thead>\n          <tr>\n            <th>Affichée</th>\n            <th>Donnée</th>\n            <th>Couleur</th>\n          </tr>\n        </thead>\n        <tbody>\n          {items}\n        </tbody>\n      </Table>\n    );\n  }\n\n}\n\n","/Users/markoarsovic/b2s/src/containers/Account/Admin/Graphiques/LayoutComponent/DropDownColors.js",["192","193","194","195","196","197"],"import DropdownButton from 'react-bootstrap/DropdownButton'\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Button from 'react-bootstrap/Button';\nimport React, { Component, useState } from \"react\";\nimport Form from 'react-bootstrap/Form'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport Colors from '../../../../../components/UI/colors'\n\n\nexport default class DropDownColors extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: \"Couleur\", //Nom des dropdown par défaut, modifié si une valeur est séléctionnée (à faire)\n      highlightColor: this.props.highlightColor, //Valeur utilisée pour pour sauvegarder la couleur a surligner car couleur actuelle de la ligne\n      colors: Colors, //Tableau JSON de toutes les couleurs\n      activeLine: this.props.activeLine, //Nom de la ligne correspondant au dropdown\n    };\n\n    //On bind la fonction handleChange pour qu'elle comprenne le contexte lorsqu'elle est passé en paramètres\n    this.handleChange = this.handleChange.bind(this);\n\n  }\n\n  //Fonction appellée lorsqu'un item est selectionné dans un dropdown\n  //Change le nom de la case (à faire) et appelle la fonction changeColor du composant LinearChart\n  handleChange(event) {\n    this.setState({\n      selected: event.target.id\n    });\n    this.props.changeColor(this.state.activeLine, event.target.id);\n  }\n\n\n  render() {\n    let items = null; //Liste des items du dropdown généré plus bas\n\n    //Génération des items du dropdown\n    items = Object.keys(this.state.colors)\n      .map(key => {\n        if (this.state.colors[key].name !== null) {\n          //Si la couleur qu'on ajoute est celle de la ligne, on la place comme active\n          if (this.state.colors[key].code === this.state.highlightColor) {\n            return (\n              <Dropdown.Item key={this.state.colors[key].name} id={this.state.colors[key].name} onClick={this.handleChange} active >\n                {this.state.colors[key].name}\n              </Dropdown.Item>\n            )\n          }\n          //Sinon, on retourne un item par nom de couleur\n          else {\n            return (\n              <Dropdown.Item key={this.state.colors[key].name} id={this.state.colors[key].name} onClick={this.handleChange}>\n                {this.state.colors[key].name}\n              </Dropdown.Item>\n            )\n          }\n\n        }\n\n\n      })\n\n    return (\n      <DropdownButton id=\"dropdown-basic-button\" title={this.state.selected}>\n        {items}\n      </DropdownButton>\n    );\n  }\n\n}\n\n","/Users/markoarsovic/b2s/src/containers/Account/Admin/Actions/ListCustomers/Customer/Customer.js",[],"/Users/markoarsovic/b2s/src/components/Users/ListUsers/ListUsers.js",[],"/Users/markoarsovic/b2s/src/components/Auth/Auth.js",[],"/Users/markoarsovic/b2s/src/components/Users/ListCustomers/ListCustomers.js",[],"/Users/markoarsovic/b2s/src/components/FormCircuits/FormCircuits.js",[],"/Users/markoarsovic/b2s/src/components/FormCircuits/Circuits/Circuits.js",[],"/Users/markoarsovic/b2s/src/components/FormCircuits/Rooms/Rooms.js",[],{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","severity":1,"message":"203","line":85,"column":15,"nodeType":"204","messageId":"205","endLine":85,"endColumn":19},{"ruleId":"202","severity":1,"message":"206","line":3,"column":8,"nodeType":"204","messageId":"205","endLine":3,"endColumn":13},{"ruleId":"202","severity":1,"message":"207","line":5,"column":8,"nodeType":"204","messageId":"205","endLine":5,"endColumn":14},{"ruleId":"202","severity":1,"message":"208","line":1,"column":28,"nodeType":"204","messageId":"205","endLine":1,"endColumn":36},{"ruleId":"202","severity":1,"message":"209","line":1,"column":38,"nodeType":"204","messageId":"205","endLine":1,"endColumn":51},{"ruleId":"202","severity":1,"message":"210","line":3,"column":5,"nodeType":"204","messageId":"205","endLine":3,"endColumn":10},{"ruleId":"202","severity":1,"message":"211","line":3,"column":67,"nodeType":"204","messageId":"205","endLine":3,"endColumn":80},{"ruleId":"202","severity":1,"message":"212","line":6,"column":8,"nodeType":"204","messageId":"205","endLine":6,"endColumn":14},{"ruleId":"202","severity":1,"message":"213","line":7,"column":8,"nodeType":"204","messageId":"205","endLine":7,"endColumn":17},{"ruleId":"202","severity":1,"message":"214","line":8,"column":8,"nodeType":"204","messageId":"205","endLine":8,"endColumn":11},{"ruleId":"202","severity":1,"message":"215","line":9,"column":8,"nodeType":"204","messageId":"205","endLine":9,"endColumn":11},{"ruleId":"202","severity":1,"message":"216","line":10,"column":8,"nodeType":"204","messageId":"205","endLine":10,"endColumn":22},{"ruleId":"202","severity":1,"message":"217","line":11,"column":8,"nodeType":"204","messageId":"205","endLine":11,"endColumn":16},{"ruleId":"202","severity":1,"message":"218","line":14,"column":8,"nodeType":"204","messageId":"205","endLine":14,"endColumn":11},{"ruleId":"219","severity":1,"message":"220","line":99,"column":22,"nodeType":"221","messageId":"222","endLine":99,"endColumn":24},{"ruleId":"223","severity":1,"message":"224","line":134,"column":29,"nodeType":"225","messageId":"226","endLine":134,"endColumn":60},{"ruleId":"202","severity":1,"message":"215","line":4,"column":8,"nodeType":"204","messageId":"205","endLine":4,"endColumn":11},{"ruleId":"202","severity":1,"message":"216","line":1,"column":8,"nodeType":"204","messageId":"205","endLine":1,"endColumn":22},{"ruleId":"202","severity":1,"message":"217","line":2,"column":8,"nodeType":"204","messageId":"205","endLine":2,"endColumn":16},{"ruleId":"202","severity":1,"message":"227","line":3,"column":8,"nodeType":"204","messageId":"205","endLine":3,"endColumn":19},{"ruleId":"202","severity":1,"message":"212","line":4,"column":8,"nodeType":"204","messageId":"205","endLine":4,"endColumn":14},{"ruleId":"202","severity":1,"message":"208","line":5,"column":28,"nodeType":"204","messageId":"205","endLine":5,"endColumn":36},{"ruleId":"202","severity":1,"message":"213","line":7,"column":8,"nodeType":"204","messageId":"205","endLine":7,"endColumn":17},{"ruleId":"202","severity":1,"message":"228","line":46,"column":9,"nodeType":"204","messageId":"205","endLine":46,"endColumn":23},{"ruleId":"219","severity":1,"message":"220","line":51,"column":16,"nodeType":"221","messageId":"222","endLine":51,"endColumn":18},{"ruleId":"202","severity":1,"message":"227","line":3,"column":8,"nodeType":"204","messageId":"205","endLine":3,"endColumn":19},{"ruleId":"202","severity":1,"message":"212","line":4,"column":8,"nodeType":"204","messageId":"205","endLine":4,"endColumn":14},{"ruleId":"202","severity":1,"message":"208","line":5,"column":28,"nodeType":"204","messageId":"205","endLine":5,"endColumn":36},{"ruleId":"202","severity":1,"message":"229","line":6,"column":8,"nodeType":"204","messageId":"205","endLine":6,"endColumn":12},{"ruleId":"202","severity":1,"message":"230","line":7,"column":8,"nodeType":"204","messageId":"205","endLine":7,"endColumn":17},{"ruleId":"219","severity":1,"message":"220","line":42,"column":16,"nodeType":"221","messageId":"222","endLine":42,"endColumn":18},"no-native-reassign",["231"],"no-negated-in-lhs",["232"],"no-unused-vars","'hash' is assigned a value but never used.","Identifier","unusedVar","'style' is defined but never used.","'Advice' is defined but never used.","'useState' is defined but never used.","'PureComponent' is defined but never used.","'Label' is defined but never used.","'ReferenceArea' is defined but never used.","'Button' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'DropdownButton' is defined but never used.","'Dropdown' is defined but never used.","'CSV' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'FormControl' is defined but never used.","'highlightColor' is assigned a value but never used.","'Form' is defined but never used.","'ListGroup' is defined but never used.","no-global-assign","no-unsafe-negation"]